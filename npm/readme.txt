Установка либы - npm install название_либы (установится последняя версия)
uninstall - удаление либы

У большиснтва команд и флагов есть сокращения
вместо install - i
npm i typescript

-D  -  --save-dev (регистр важен)

package.json содержит информацию о зависимостях, версиях, js файле и тд
после названия либы можно написать @версия_либы (напр npm install bootstrap @4.6.2)

^ вначале версии - установливается после символа указанная версия или версия которая обратно совместимая
при ее отсутвии устанавливается конкретная версия

Это связано с версионированием
где например 2.7.11, 2 - мажорные изменения меняющие что-то глобально (напр синтаксис)
7 - это новвоведения как правило с обратной совместимостью, т.е что-то добавляется (минорная версия)
11 - это номер патча (исправления)


package-lock.json - содержит дополнительную вспомогательную информацию для самого npm(обычно его не меняют и не трогают)

в папке node_modules(самый тяжелый объект во вселенной) содержатся библиотеки и зависимости
при пуше проекта на гитхаб эту папку удаляют из-за своей тяжеловесности
если другой разработчик(или ты) скачивает проект то он должен написать npm install
npm снова создаст node_modules загрузит все либы и зависимости тк вся информация о них содержится в package.json

Флаги

Флаги можно указывать после версии библиотеки или до(не играет роли)

--save-dev
этот флаг флаг добавляет зависимости которые необходимы на этапе разработки
в package.json зависимоть записаная с этим флагом будет в devDependencies
Обычно это сборщики проектов(Vite, webpack, gulp), плагины (ts, sass, prettier, eslint и тд)

остальные зависимости в dependencies нужны конечному пользователю
библиотеки, код которых будут включены в css, js файлы финального продукта
например любые css либы(bootstrap, tailwind, material ui), js либы (lodash, jquerry, datefns, react, vue, angular и их доп либы)

dependencies и devDependencies - делят библиотеки на инструменты для разработки (devDependencies)
а другой (dependencies) важный функционал для конечного приложения

devDependencies - это либы которые нужны сугубо для разработки например другой либы
и допустим при скачивании этой либы эти зависимости не будут установлены тк они никак не влиюят на продукт


Поле scripts
нужен для скриптов чтобы работать над проектом(локальный сервер, сборщик проектов, линтеры)
например указывается имя скрипта а затем команды которые он будет воспроизводить
нужен в основном для автоматизации


При конфликте либ
можно попытаться очистить кэш: npm cache clean --force

если не поможет то удалить node_modules и package-lock.json
и заново все установить через npm i


npx - запускает команду из установленных пакетов npm
например npx tsc script.ts (если typescript не установлен глобально)

npm create либа - с помощтю нее тоже можно начать разработку проекта
npm create не создает node_modules